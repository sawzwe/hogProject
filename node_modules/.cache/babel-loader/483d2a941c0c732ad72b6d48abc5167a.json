{"ast":null,"code":"function resolveVariantFromProps(props, definition, custom) {\n  let currentValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let currentVelocity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  /**\n   * If the variant definition is a function, resolve.\n   */\n  if (typeof definition === \"function\") {\n    definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n  }\n  /**\n   * If the variant definition is a variant label, or\n   * the function returned a variant label, resolve.\n   */\n  if (typeof definition === \"string\") {\n    definition = props.variants && props.variants[definition];\n  }\n  /**\n   * At this point we've resolved both functions and variant labels,\n   * but the resolved variant label might itself have been a function.\n   * If so, resolve. This can only have returned a valid target object.\n   */\n  if (typeof definition === \"function\") {\n    definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n  }\n  return definition;\n}\nexport { resolveVariantFromProps };","map":null,"metadata":{},"sourceType":"module"}