{"ast":null,"code":"import { process } from './process';\nimport { global } from './global';\nimport { queueResizeObserver } from './queueResizeObserver';\nvar watching = 0;\nvar isWatching = function () {\n  return !!watching;\n};\nvar CATCH_PERIOD = 250;\nvar observerConfig = {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nvar events = ['resize', 'load', 'transitionend', 'animationend', 'animationstart', 'animationiteration', 'keyup', 'keydown', 'mouseup', 'mousedown', 'mouseover', 'mouseout', 'blur', 'focus'];\nvar time = function (timeout) {\n  if (timeout === void 0) {\n    timeout = 0;\n  }\n  return Date.now() + timeout;\n};\nvar scheduled = false;\nvar Scheduler = function () {\n  function Scheduler() {\n    var _this = this;\n    this.stopped = true;\n    this.listener = function () {\n      return _this.schedule();\n    };\n  }\n  Scheduler.prototype.run = function (timeout) {\n    var _this = this;\n    if (timeout === void 0) {\n      timeout = CATCH_PERIOD;\n    }\n    if (scheduled) {\n      return;\n    }\n    scheduled = true;\n    var until = time(timeout);\n    queueResizeObserver(function () {\n      var elementsHaveResized = false;\n      try {\n        elementsHaveResized = process();\n      } finally {\n        scheduled = false;\n        timeout = until - time();\n        if (!isWatching()) {\n          return;\n        }\n        if (elementsHaveResized) {\n          _this.run(1000);\n        } else if (timeout > 0) {\n          _this.run(timeout);\n        } else {\n          _this.start();\n        }\n      }\n    });\n  };\n  Scheduler.prototype.schedule = function () {\n    this.stop();\n    this.run();\n  };\n  Scheduler.prototype.observe = function () {\n    var _this = this;\n    var cb = function () {\n      return _this.observer && _this.observer.observe(document.body, observerConfig);\n    };\n    document.body ? cb() : global.addEventListener('DOMContentLoaded', cb);\n  };\n  Scheduler.prototype.start = function () {\n    var _this = this;\n    if (this.stopped) {\n      this.stopped = false;\n      this.observer = new MutationObserver(this.listener);\n      this.observe();\n      events.forEach(function (name) {\n        return global.addEventListener(name, _this.listener, true);\n      });\n    }\n  };\n  Scheduler.prototype.stop = function () {\n    var _this = this;\n    if (!this.stopped) {\n      this.observer && this.observer.disconnect();\n      events.forEach(function (name) {\n        return global.removeEventListener(name, _this.listener, true);\n      });\n      this.stopped = true;\n    }\n  };\n  return Scheduler;\n}();\nvar scheduler = new Scheduler();\nvar updateCount = function (n) {\n  !watching && n > 0 && scheduler.start();\n  watching += n;\n  !watching && scheduler.stop();\n};\nexport { scheduler, updateCount };","map":null,"metadata":{},"sourceType":"module"}