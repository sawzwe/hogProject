{"ast":null,"code":"import { invariant } from 'hey-listen';\nimport * as React from 'react';\nimport { forwardRef, useContext, useRef, useEffect } from 'react';\nimport { ReorderContext } from '../../context/ReorderContext.mjs';\nimport { motion } from '../../render/dom/motion.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useMotionValue } from '../../value/use-motion-value.mjs';\nimport { useTransform } from '../../value/use-transform.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nfunction useDefaultMotionValue(value) {\n  let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return isMotionValue(value) ? value : useMotionValue(defaultValue);\n}\nfunction ReorderItem(_ref, externalRef) {\n  let {\n    children,\n    style = {},\n    value,\n    as = \"li\",\n    onDrag,\n    layout = true,\n    ...props\n  } = _ref;\n  const Component = useConstant(() => motion(as));\n  const context = useContext(ReorderContext);\n  const point = {\n    x: useDefaultMotionValue(style.x),\n    y: useDefaultMotionValue(style.y)\n  };\n  const zIndex = useTransform([point.x, point.y], _ref2 => {\n    let [latestX, latestY] = _ref2;\n    return latestX || latestY ? 1 : \"unset\";\n  });\n  const measuredLayout = useRef(null);\n  invariant(Boolean(context), \"Reorder.Item must be a child of Reorder.Group\");\n  const {\n    axis,\n    registerItem,\n    updateOrder\n  } = context;\n  useEffect(() => {\n    registerItem(value, measuredLayout.current);\n  }, [context]);\n  return React.createElement(Component, {\n    drag: axis,\n    ...props,\n    dragSnapToOrigin: true,\n    style: {\n      ...style,\n      x: point.x,\n      y: point.y,\n      zIndex\n    },\n    layout: layout,\n    onDrag: (event, gesturePoint) => {\n      const {\n        velocity\n      } = gesturePoint;\n      velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);\n      onDrag && onDrag(event, gesturePoint);\n    },\n    onLayoutMeasure: measured => {\n      measuredLayout.current = measured;\n    },\n    ref: externalRef\n  }, children);\n}\nconst Item = forwardRef(ReorderItem);\nexport { Item, ReorderItem };","map":null,"metadata":{},"sourceType":"module"}