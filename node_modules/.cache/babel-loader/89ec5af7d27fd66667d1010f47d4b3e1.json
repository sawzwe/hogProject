{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pypho\\\\Desktop\\\\hogProject\\\\src\\\\sections\\\\auth\\\\AuthResetPasswordForm.js\",\n  _s = $RefreshSig$();\nimport * as Yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\n// form\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\n// @mui\nimport { LoadingButton } from '@mui/lab';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// components\nimport FormProvider, { RHFTextField } from '../../components/hook-form';\n\n// ----------------------------------------------------------------------\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AuthResetPasswordForm() {\n  _s();\n  const navigate = useNavigate();\n  const ResetPasswordSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required')\n  });\n  const methods = useForm({\n    resolver: yupResolver(ResetPasswordSchema),\n    defaultValues: {\n      email: 'demo@minimals.cc'\n    }\n  });\n  const {\n    handleSubmit,\n    formState: {\n      isSubmitting\n    }\n  } = methods;\n  const onSubmit = async data => {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      sessionStorage.setItem('email-recovery', data.email);\n      navigate(PATH_AUTH.newPassword);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(FormProvider, {\n    methods: methods,\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(RHFTextField, {\n      name: \"email\",\n      label: \"Email address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n      fullWidth: true,\n      size: \"large\",\n      type: \"submit\",\n      variant: \"contained\",\n      loading: isSubmitting,\n      sx: {\n        mt: 3\n      },\n      children: \"Send Request\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthResetPasswordForm, \"+ILwCy6SxVEh3ibi05UKyDRKkUQ=\", false, function () {\n  return [useNavigate, useForm];\n});\n_c = AuthResetPasswordForm;\nvar _c;\n$RefreshReg$(_c, \"AuthResetPasswordForm\");","map":{"version":3,"names":["Yup","useNavigate","yupResolver","useForm","LoadingButton","PATH_AUTH","FormProvider","RHFTextField","AuthResetPasswordForm","navigate","ResetPasswordSchema","object","shape","email","string","required","methods","resolver","defaultValues","handleSubmit","formState","isSubmitting","onSubmit","data","Promise","resolve","setTimeout","sessionStorage","setItem","newPassword","error","console","mt"],"sources":["C:/Users/pypho/Desktop/hogProject/src/sections/auth/AuthResetPasswordForm.js"],"sourcesContent":["import * as Yup from 'yup';\r\nimport { useNavigate } from 'react-router-dom';\r\n// form\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\n// @mui\r\nimport { LoadingButton } from '@mui/lab';\r\n// routes\r\nimport { PATH_AUTH } from '../../routes/paths';\r\n// components\r\nimport FormProvider, { RHFTextField } from '../../components/hook-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AuthResetPasswordForm() {\r\n    const navigate = useNavigate();\r\n\r\n    const ResetPasswordSchema = Yup.object().shape({\r\n        email: Yup.string().email('Email must be a valid email address').required('Email is required'),\r\n    });\r\n\r\n    const methods = useForm({\r\n        resolver: yupResolver(ResetPasswordSchema),\r\n        defaultValues: { email: 'demo@minimals.cc' },\r\n    });\r\n\r\n    const {\r\n        handleSubmit,\r\n        formState: { isSubmitting },\r\n    } = methods;\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            await new Promise((resolve) => setTimeout(resolve, 500));\r\n\r\n            sessionStorage.setItem('email-recovery', data.email);\r\n\r\n            navigate(PATH_AUTH.newPassword);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            <RHFTextField name=\"email\" label=\"Email address\" />\r\n\r\n            <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting} sx={{ mt: 3 }}>\r\n                Send Request\r\n            </LoadingButton>\r\n        </FormProvider>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C;AACA,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,OAAO,QAAQ,iBAAiB;AACzC;AACA,SAASC,aAAa,QAAQ,UAAU;AACxC;AACA,SAASC,SAAS,QAAQ,oBAAoB;AAC9C;AACA,OAAOC,YAAY,IAAIC,YAAY,QAAQ,4BAA4B;;AAEvE;AAAA;AAEA,eAAe,SAASC,qBAAqB,GAAG;EAAA;EAC5C,MAAMC,QAAQ,GAAGR,WAAW,EAAE;EAE9B,MAAMS,mBAAmB,GAAGV,GAAG,CAACW,MAAM,EAAE,CAACC,KAAK,CAAC;IAC3CC,KAAK,EAAEb,GAAG,CAACc,MAAM,EAAE,CAACD,KAAK,CAAC,qCAAqC,CAAC,CAACE,QAAQ,CAAC,mBAAmB;EACjG,CAAC,CAAC;EAEF,MAAMC,OAAO,GAAGb,OAAO,CAAC;IACpBc,QAAQ,EAAEf,WAAW,CAACQ,mBAAmB,CAAC;IAC1CQ,aAAa,EAAE;MAAEL,KAAK,EAAE;IAAmB;EAC/C,CAAC,CAAC;EAEF,MAAM;IACFM,YAAY;IACZC,SAAS,EAAE;MAAEC;IAAa;EAC9B,CAAC,GAAGL,OAAO;EAEX,MAAMM,QAAQ,GAAG,MAAOC,IAAI,IAAK;IAC7B,IAAI;MACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAExDE,cAAc,CAACC,OAAO,CAAC,gBAAgB,EAAEL,IAAI,CAACV,KAAK,CAAC;MAEpDJ,QAAQ,CAACJ,SAAS,CAACwB,WAAW,CAAC;IACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACxB;EACJ,CAAC;EAED,oBACI,QAAC,YAAY;IAAC,OAAO,EAAEd,OAAQ;IAAC,QAAQ,EAAEG,YAAY,CAACG,QAAQ,CAAE;IAAA,wBAC7D,QAAC,YAAY;MAAC,IAAI,EAAC,OAAO;MAAC,KAAK,EAAC;IAAe;MAAA;MAAA;MAAA;IAAA,QAAG,eAEnD,QAAC,aAAa;MAAC,SAAS;MAAC,IAAI,EAAC,OAAO;MAAC,IAAI,EAAC,QAAQ;MAAC,OAAO,EAAC,WAAW;MAAC,OAAO,EAAED,YAAa;MAAC,EAAE,EAAE;QAAEW,EAAE,EAAE;MAAE,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAE7F;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEvB;AAAC,GAtCuBxB,qBAAqB;EAAA,QACxBP,WAAW,EAMZE,OAAO;AAAA;AAAA,KAPHK,qBAAqB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}