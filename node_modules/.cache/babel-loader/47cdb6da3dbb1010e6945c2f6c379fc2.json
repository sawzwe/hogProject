{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pypho\\\\Desktop\\\\hogProject\\\\src\\\\components\\\\settings\\\\SettingsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport PropTypes from 'prop-types';\nimport { createContext, useEffect, useContext, useMemo, useCallback } from 'react';\n// hooks\nimport useLocalStorage from '../../hooks/useLocalStorage';\n//\nimport { defaultSettings } from './config';\nimport { defaultPreset, getPresets, presetsOption } from './presets';\n\n// ----------------------------------------------------------------------\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  ...defaultSettings,\n  // Mode\n  onToggleMode: () => {},\n  onChangeMode: () => {},\n  // Direction\n  onToggleDirection: () => {},\n  onChangeDirection: () => {},\n  onChangeDirectionByLang: () => {},\n  // Layout\n  onChangeLayout: () => {},\n  // Contrast\n  onToggleContrast: () => {},\n  onChangeContrast: () => {},\n  // Color\n  onChangeColorPresets: () => {},\n  presetsColor: defaultPreset,\n  presetsOption: [],\n  // Stretch\n  onToggleStretch: () => {},\n  // Reset\n  onResetSetting: () => {}\n};\n\n// ----------------------------------------------------------------------\n\nexport const SettingsContext = /*#__PURE__*/createContext(initialState);\nexport const useSettingsContext = () => {\n  _s();\n  const context = useContext(SettingsContext);\n  if (!context) throw new Error('useSettingsContext must be use inside SettingsProvider');\n  return context;\n};\n\n// ----------------------------------------------------------------------\n_s(useSettingsContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nSettingsProvider.propTypes = {\n  children: PropTypes.node\n};\nexport function SettingsProvider(_ref) {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const [settings, setSettings] = useLocalStorage('settings', defaultSettings);\n  const langStorage = typeof window !== 'undefined' ? localStorage.getItem('i18nextLng') : '';\n  const isArabic = langStorage === 'ar';\n  useEffect(() => {\n    if (isArabic) {\n      onChangeDirectionByLang('ar');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isArabic]);\n\n  // Mode\n  const onToggleMode = useCallback(() => {\n    const themeMode = settings.themeMode === 'light' ? 'dark' : 'light';\n    setSettings({\n      ...settings,\n      themeMode\n    });\n  }, [setSettings, settings]);\n  const onChangeMode = useCallback(event => {\n    const themeMode = event.target.value;\n    setSettings({\n      ...settings,\n      themeMode\n    });\n  }, [setSettings, settings]);\n\n  // Direction\n  const onToggleDirection = useCallback(() => {\n    const themeDirection = settings.themeDirection === 'rtl' ? 'ltr' : 'rtl';\n    setSettings({\n      ...settings,\n      themeDirection\n    });\n  }, [setSettings, settings]);\n  const onChangeDirection = useCallback(event => {\n    const themeDirection = event.target.value;\n    setSettings({\n      ...settings,\n      themeDirection\n    });\n  }, [setSettings, settings]);\n  const onChangeDirectionByLang = useCallback(lang => {\n    const themeDirection = lang === 'ar' ? 'rtl' : 'ltr';\n    setSettings({\n      ...settings,\n      themeDirection\n    });\n  }, [setSettings, settings]);\n\n  // Layout\n  const onChangeLayout = useCallback(event => {\n    const themeLayout = event.target.value;\n    setSettings({\n      ...settings,\n      themeLayout\n    });\n  }, [setSettings, settings]);\n\n  // Contrast\n  const onToggleContrast = useCallback(() => {\n    const themeContrast = settings.themeContrast === 'default' ? 'bold' : 'default';\n    setSettings({\n      ...settings,\n      themeContrast\n    });\n  }, [setSettings, settings]);\n  const onChangeContrast = useCallback(event => {\n    const themeContrast = event.target.value;\n    setSettings({\n      ...settings,\n      themeContrast\n    });\n  }, [setSettings, settings]);\n\n  // Color\n  const onChangeColorPresets = useCallback(event => {\n    const themeColorPresets = event.target.value;\n    setSettings({\n      ...settings,\n      themeColorPresets\n    });\n  }, [setSettings, settings]);\n\n  // Stretch\n  const onToggleStretch = useCallback(() => {\n    const themeStretch = !settings.themeStretch;\n    setSettings({\n      ...settings,\n      themeStretch\n    });\n  }, [setSettings, settings]);\n\n  // Reset\n  const onResetSetting = useCallback(() => {\n    setSettings(defaultSettings);\n  }, [setSettings]);\n  const value = useMemo(() => ({\n    ...settings,\n    // Mode\n    onToggleMode,\n    onChangeMode,\n    // Direction\n    onToggleDirection,\n    onChangeDirection,\n    onChangeDirectionByLang,\n    // Layout\n    onChangeLayout,\n    // Contrast\n    onChangeContrast,\n    onToggleContrast,\n    // Stretch\n    onToggleStretch,\n    // Color\n    onChangeColorPresets,\n    presetsOption,\n    presetsColor: getPresets(settings.themeColorPresets),\n    // Reset\n    onResetSetting\n  }), [settings,\n  // Mode\n  onToggleMode, onChangeMode,\n  // Direction\n  onToggleDirection, onChangeDirection, onChangeDirectionByLang,\n  // Layout\n  onChangeLayout, onChangeContrast,\n  // Contrast\n  onToggleContrast,\n  // Stretch\n  onToggleStretch,\n  // Color\n  onChangeColorPresets,\n  // Reset\n  onResetSetting]);\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 10\n  }, this);\n}\n_s2(SettingsProvider, \"6HgSsBvIzNYKtRo1/22bmfAFjz4=\", false, function () {\n  return [useLocalStorage];\n});\n_c = SettingsProvider;\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["PropTypes","createContext","useEffect","useContext","useMemo","useCallback","useLocalStorage","defaultSettings","defaultPreset","getPresets","presetsOption","initialState","onToggleMode","onChangeMode","onToggleDirection","onChangeDirection","onChangeDirectionByLang","onChangeLayout","onToggleContrast","onChangeContrast","onChangeColorPresets","presetsColor","onToggleStretch","onResetSetting","SettingsContext","useSettingsContext","context","Error","SettingsProvider","propTypes","children","node","settings","setSettings","langStorage","window","localStorage","getItem","isArabic","themeMode","event","target","value","themeDirection","lang","themeLayout","themeContrast","themeColorPresets","themeStretch"],"sources":["C:/Users/pypho/Desktop/hogProject/src/components/settings/SettingsContext.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport { createContext, useEffect, useContext, useMemo, useCallback } from 'react';\r\n// hooks\r\nimport useLocalStorage from '../../hooks/useLocalStorage';\r\n//\r\nimport { defaultSettings } from './config';\r\nimport { defaultPreset, getPresets, presetsOption } from './presets';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst initialState = {\r\n  ...defaultSettings,\r\n  // Mode\r\n  onToggleMode: () => {},\r\n  onChangeMode: () => {},\r\n  // Direction\r\n  onToggleDirection: () => {},\r\n  onChangeDirection: () => {},\r\n  onChangeDirectionByLang: () => {},\r\n  // Layout\r\n  onChangeLayout: () => {},\r\n  // Contrast\r\n  onToggleContrast: () => {},\r\n  onChangeContrast: () => {},\r\n  // Color\r\n  onChangeColorPresets: () => {},\r\n  presetsColor: defaultPreset,\r\n  presetsOption: [],\r\n  // Stretch\r\n  onToggleStretch: () => {},\r\n  // Reset\r\n  onResetSetting: () => {},\r\n};\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport const SettingsContext = createContext(initialState);\r\n\r\nexport const useSettingsContext = () => {\r\n  const context = useContext(SettingsContext);\r\n\r\n  if (!context) throw new Error('useSettingsContext must be use inside SettingsProvider');\r\n\r\n  return context;\r\n};\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nSettingsProvider.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport function SettingsProvider({ children }) {\r\n  const [settings, setSettings] = useLocalStorage('settings', defaultSettings);\r\n\r\n  const langStorage = typeof window !== 'undefined' ? localStorage.getItem('i18nextLng') : '';\r\n\r\n  const isArabic = langStorage === 'ar';\r\n\r\n  useEffect(() => {\r\n    if (isArabic) {\r\n      onChangeDirectionByLang('ar');\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isArabic]);\r\n\r\n  // Mode\r\n  const onToggleMode = useCallback(() => {\r\n    const themeMode = settings.themeMode === 'light' ? 'dark' : 'light';\r\n    setSettings({ ...settings, themeMode });\r\n  }, [setSettings, settings]);\r\n\r\n  const onChangeMode = useCallback(\r\n    (event) => {\r\n      const themeMode = event.target.value;\r\n      setSettings({ ...settings, themeMode });\r\n    },\r\n    [setSettings, settings]\r\n  );\r\n\r\n  // Direction\r\n  const onToggleDirection = useCallback(() => {\r\n    const themeDirection = settings.themeDirection === 'rtl' ? 'ltr' : 'rtl';\r\n    setSettings({ ...settings, themeDirection });\r\n  }, [setSettings, settings]);\r\n\r\n  const onChangeDirection = useCallback(\r\n    (event) => {\r\n      const themeDirection = event.target.value;\r\n      setSettings({ ...settings, themeDirection });\r\n    },\r\n    [setSettings, settings]\r\n  );\r\n\r\n  const onChangeDirectionByLang = useCallback(\r\n    (lang) => {\r\n      const themeDirection = lang === 'ar' ? 'rtl' : 'ltr';\r\n      setSettings({ ...settings, themeDirection });\r\n    },\r\n    [setSettings, settings]\r\n  );\r\n\r\n  // Layout\r\n  const onChangeLayout = useCallback(\r\n    (event) => {\r\n      const themeLayout = event.target.value;\r\n      setSettings({ ...settings, themeLayout });\r\n    },\r\n    [setSettings, settings]\r\n  );\r\n\r\n  // Contrast\r\n  const onToggleContrast = useCallback(() => {\r\n    const themeContrast = settings.themeContrast === 'default' ? 'bold' : 'default';\r\n    setSettings({ ...settings, themeContrast });\r\n  }, [setSettings, settings]);\r\n\r\n  const onChangeContrast = useCallback(\r\n    (event) => {\r\n      const themeContrast = event.target.value;\r\n      setSettings({ ...settings, themeContrast });\r\n    },\r\n    [setSettings, settings]\r\n  );\r\n\r\n  // Color\r\n  const onChangeColorPresets = useCallback(\r\n    (event) => {\r\n      const themeColorPresets = event.target.value;\r\n      setSettings({ ...settings, themeColorPresets });\r\n    },\r\n    [setSettings, settings]\r\n  );\r\n\r\n  // Stretch\r\n  const onToggleStretch = useCallback(() => {\r\n    const themeStretch = !settings.themeStretch;\r\n    setSettings({ ...settings, themeStretch });\r\n  }, [setSettings, settings]);\r\n\r\n  // Reset\r\n  const onResetSetting = useCallback(() => {\r\n    setSettings(defaultSettings);\r\n  }, [setSettings]);\r\n\r\n  const value = useMemo(\r\n    () => ({\r\n      ...settings,\r\n      // Mode\r\n      onToggleMode,\r\n      onChangeMode,\r\n      // Direction\r\n      onToggleDirection,\r\n      onChangeDirection,\r\n      onChangeDirectionByLang,\r\n      // Layout\r\n      onChangeLayout,\r\n      // Contrast\r\n      onChangeContrast,\r\n      onToggleContrast,\r\n      // Stretch\r\n      onToggleStretch,\r\n      // Color\r\n      onChangeColorPresets,\r\n      presetsOption,\r\n      presetsColor: getPresets(settings.themeColorPresets),\r\n      // Reset\r\n      onResetSetting,\r\n    }),\r\n    [\r\n      settings,\r\n      // Mode\r\n      onToggleMode,\r\n      onChangeMode,\r\n      // Direction\r\n      onToggleDirection,\r\n      onChangeDirection,\r\n      onChangeDirectionByLang,\r\n      // Layout\r\n      onChangeLayout,\r\n      onChangeContrast,\r\n      // Contrast\r\n      onToggleContrast,\r\n      // Stretch\r\n      onToggleStretch,\r\n      // Color\r\n      onChangeColorPresets,\r\n      // Reset\r\n      onResetSetting,\r\n    ]\r\n  );\r\n\r\n  return <SettingsContext.Provider value={value}>{children}</SettingsContext.Provider>;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}