{"ast":null,"code":"// import { useState, memo, useEffect } from 'react';\n// import parse from 'autosuggest-highlight/parse';\n// import match from 'autosuggest-highlight/match';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// // @mui\n// import { alpha, styled } from '@mui/material/styles';\n// import { Box, Slide, Popper, InputBase, InputAdornment, ClickAwayListener } from '@mui/material';\n// import Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\n// // utils\n// import { bgBlur } from '../../../utils/cssStyles';\n// import flattenArray from '../../../utils/flattenArray';\n// // components\n// import Iconify from '../../../components/iconify';\n// import { IconButtonAnimate } from '../../../components/animate';\n// import SearchNotFound from '../../../components/search-not-found';\n// //\n// import NavConfig from '../nav/config';\n\n// // ----------------------------------------------------------------------\n\n// const APPBAR_MOBILE = 64;\n// const APPBAR_DESKTOP = 92;\n\n// const StyledSearchbar = styled('div')(({ theme }) => ({\n//   ...bgBlur({ color: theme.palette.background.default }),\n//   top: 0,\n//   left: 0,\n//   zIndex: 99,\n//   width: '100%',\n//   display: 'flex',\n//   position: 'absolute',\n//   alignItems: 'center',\n//   height: APPBAR_MOBILE,\n//   padding: theme.spacing(0, 3),\n//   boxShadow: theme.customShadows.z8,\n//   [theme.breakpoints.up('md')]: {\n//     height: APPBAR_DESKTOP,\n//     padding: theme.spacing(0, 5),\n//   },\n// }));\n\n// const StyledPopper = styled((props) => <Popper {...props} />)(({ theme }) => ({\n//   left: `8px !important`,\n//   top: `${APPBAR_MOBILE + 8}px !important`,\n//   width: 'calc(100% - 16px) !important',\n//   transform: 'none !important',\n//   [theme.breakpoints.up('md')]: {\n//     top: `${APPBAR_DESKTOP + 8}px !important`,\n//   },\n//   '& .MuiAutocomplete-paper': {\n//     padding: theme.spacing(1, 0),\n//   },\n//   '& .MuiListSubheader-root': {\n//     '&.MuiAutocomplete-groupLabel': {\n//       ...bgBlur({ color: theme.palette.background.neutral }),\n//       ...theme.typography.overline,\n//       top: 0,\n//       margin: 0,\n//       lineHeight: '48px',\n//       borderRadius: theme.shape.borderRadius,\n//     },\n//   },\n//   '& .MuiAutocomplete-listbox': {\n//     '& .MuiAutocomplete-option': {\n//       padding: theme.spacing(0.5, 2),\n//       margin: 0,\n//       display: 'block',\n//       border: `dashed 1px transparent`,\n//       borderBottomColor: theme.palette.divider,\n//       '&:last-of-type': {\n//         borderBottomColor: 'transparent',\n//       },\n//       '&:hover': {\n//         borderColor: theme.palette.primary.main,\n//         backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n//       },\n//     },\n//   },\n// }));\n\n// // ----------------------------------------------------------------------\n\n// function Searchbar() {\n//   const navigate = useNavigate();\n\n//   const { pathname } = useLocation();\n\n//   const [open, setOpen] = useState(false);\n\n//   const [searchQuery, setSearchQuery] = useState('');\n\n//   const reduceItems = NavConfig.map((list) => handleLoop(list.items, list.subheader)).flat();\n\n//   const allItems = flattenArray(reduceItems).map((option) => {\n//     const group = splitPath(reduceItems, option.path);\n\n//     return {\n//       group: group && group.length > 1 ? group[0] : option.subheader,\n//       title: option.title,\n//       path: option.path,\n//     };\n//   });\n\n//   useEffect(() => {\n//     if (open) {\n//       handleClose();\n//     }\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, [pathname]);\n\n//   const handleOpen = () => {\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//   };\n\n//   const handleClick = (path) => {\n//     if (path.includes('http')) {\n//       window.open(path);\n//     } else {\n//       navigate(path);\n//     }\n//     handleClose();\n//   };\n\n//   const handleKeyUp = (event) => {\n//     if (event.key === 'Enter') {\n//       handleClick(searchQuery);\n//     }\n//   };\n\n//   return (\n//     <ClickAwayListener onClickAway={handleClose}>\n//       <div>\n//         {!open && (\n//           <IconButtonAnimate onClick={handleOpen}>\n//             <Iconify icon=\"eva:search-fill\" />\n//           </IconButtonAnimate>\n//         )}\n\n//         <Slide direction=\"down\" in={open} mountOnEnter unmountOnExit>\n//           <StyledSearchbar>\n//             <Autocomplete\n//               sx={{ width: 1, height: 1 }}\n//               autoHighlight\n//               disablePortal\n//               disableClearable\n//               popupIcon={null}\n//               PopperComponent={StyledPopper}\n//               onInputChange={(event, value) => setSearchQuery(value)}\n//               noOptionsText={<SearchNotFound query={searchQuery} sx={{ py: 10 }} />}\n//               options={allItems.sort((a, b) => -b.group.localeCompare(a.group))}\n//               groupBy={(option) => option.group}\n//               getOptionLabel={(option) => option.path}\n//               isOptionEqualToValue={(option, value) => option.path === value.path}\n//               filterOptions={createFilterOptions({\n//                 matchFrom: 'start',\n//                 stringify: (option) => option.title || option.path,\n//               })}\n//               renderInput={(params) => (\n//                 <InputBase\n//                   {...params.InputProps}\n//                   inputProps={params.inputProps}\n//                   fullWidth\n//                   autoFocus\n//                   placeholder=\"Search...\"\n//                   onKeyUp={handleKeyUp}\n//                   startAdornment={\n//                     <InputAdornment position=\"start\">\n//                       <Iconify icon=\"eva:search-fill\" sx={{ color: 'text.disabled' }} />\n//                     </InputAdornment>\n//                   }\n//                   sx={{ height: 1, typography: 'h6' }}\n//                 />\n//               )}\n//               renderOption={(props, option, { inputValue }) => {\n//                 const { title, path } = option;\n\n//                 const partsTitle = parse(title, match(title, inputValue));\n\n//                 const partsPath = parse(path, match(path, inputValue));\n\n//                 return (\n//                   <Box component=\"li\" {...props} onClick={() => handleClick(path)}>\n//                     <div>\n//                       {partsTitle.map((part, index) => (\n//                         <Box\n//                           key={index}\n//                           component=\"span\"\n//                           sx={{\n//                             typography: 'subtitle2',\n//                             textTransform: 'capitalize',\n//                             color: part.highlight ? 'primary.main' : 'text,primary',\n//                           }}\n//                         >\n//                           {part.text}\n//                         </Box>\n//                       ))}\n//                     </div>\n\n//                     <div>\n//                       {partsPath.map((part, index) => (\n//                         <Box\n//                           key={index}\n//                           component=\"span\"\n//                           sx={{\n//                             typography: 'caption',\n//                             color: part.highlight ? 'primary.main' : 'text.secondary',\n//                           }}\n//                         >\n//                           {part.text}\n//                         </Box>\n//                       ))}\n//                     </div>\n//                   </Box>\n//                 );\n//               }}\n//             />\n//           </StyledSearchbar>\n//         </Slide>\n//       </div>\n//     </ClickAwayListener>\n//   );\n// }\n\n// export default memo(Searchbar);\n\n// // ----------------------------------------------------------------------\n\n// function splitPath(array, key) {\n//   let stack = array.map((item) => ({\n//     path: [item.title],\n//     currItem: item,\n//   }));\n\n//   while (stack.length) {\n//     const { path, currItem } = stack.pop();\n\n//     if (currItem.path === key) {\n//       return path;\n//     }\n\n//     if (currItem.children?.length) {\n//       stack = stack.concat(\n//         currItem.children.map((item) => ({\n//           path: path.concat(item.title),\n//           currItem: item,\n//         }))\n//       );\n//     }\n//   }\n//   return null;\n// }\n\n// // ----------------------------------------------------------------------\n\n// function handleLoop(array, subheader = '') {\n//   return array?.map((list) => ({\n//     subheader,\n//     ...list,\n//     ...(list.children && {\n//       children: handleLoop(list.children, subheader),\n//     }),\n//   }));\n// }","map":{"version":3,"names":[],"sources":["C:/Users/pypho/Desktop/hogProject/src/layouts/dashboard/header/Searchbar.js"],"sourcesContent":["// import { useState, memo, useEffect } from 'react';\r\n// import parse from 'autosuggest-highlight/parse';\r\n// import match from 'autosuggest-highlight/match';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// // @mui\r\n// import { alpha, styled } from '@mui/material/styles';\r\n// import { Box, Slide, Popper, InputBase, InputAdornment, ClickAwayListener } from '@mui/material';\r\n// import Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\r\n// // utils\r\n// import { bgBlur } from '../../../utils/cssStyles';\r\n// import flattenArray from '../../../utils/flattenArray';\r\n// // components\r\n// import Iconify from '../../../components/iconify';\r\n// import { IconButtonAnimate } from '../../../components/animate';\r\n// import SearchNotFound from '../../../components/search-not-found';\r\n// //\r\n// import NavConfig from '../nav/config';\r\n\r\n// // ----------------------------------------------------------------------\r\n\r\n// const APPBAR_MOBILE = 64;\r\n// const APPBAR_DESKTOP = 92;\r\n\r\n// const StyledSearchbar = styled('div')(({ theme }) => ({\r\n//   ...bgBlur({ color: theme.palette.background.default }),\r\n//   top: 0,\r\n//   left: 0,\r\n//   zIndex: 99,\r\n//   width: '100%',\r\n//   display: 'flex',\r\n//   position: 'absolute',\r\n//   alignItems: 'center',\r\n//   height: APPBAR_MOBILE,\r\n//   padding: theme.spacing(0, 3),\r\n//   boxShadow: theme.customShadows.z8,\r\n//   [theme.breakpoints.up('md')]: {\r\n//     height: APPBAR_DESKTOP,\r\n//     padding: theme.spacing(0, 5),\r\n//   },\r\n// }));\r\n\r\n// const StyledPopper = styled((props) => <Popper {...props} />)(({ theme }) => ({\r\n//   left: `8px !important`,\r\n//   top: `${APPBAR_MOBILE + 8}px !important`,\r\n//   width: 'calc(100% - 16px) !important',\r\n//   transform: 'none !important',\r\n//   [theme.breakpoints.up('md')]: {\r\n//     top: `${APPBAR_DESKTOP + 8}px !important`,\r\n//   },\r\n//   '& .MuiAutocomplete-paper': {\r\n//     padding: theme.spacing(1, 0),\r\n//   },\r\n//   '& .MuiListSubheader-root': {\r\n//     '&.MuiAutocomplete-groupLabel': {\r\n//       ...bgBlur({ color: theme.palette.background.neutral }),\r\n//       ...theme.typography.overline,\r\n//       top: 0,\r\n//       margin: 0,\r\n//       lineHeight: '48px',\r\n//       borderRadius: theme.shape.borderRadius,\r\n//     },\r\n//   },\r\n//   '& .MuiAutocomplete-listbox': {\r\n//     '& .MuiAutocomplete-option': {\r\n//       padding: theme.spacing(0.5, 2),\r\n//       margin: 0,\r\n//       display: 'block',\r\n//       border: `dashed 1px transparent`,\r\n//       borderBottomColor: theme.palette.divider,\r\n//       '&:last-of-type': {\r\n//         borderBottomColor: 'transparent',\r\n//       },\r\n//       '&:hover': {\r\n//         borderColor: theme.palette.primary.main,\r\n//         backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),\r\n//       },\r\n//     },\r\n//   },\r\n// }));\r\n\r\n// // ----------------------------------------------------------------------\r\n\r\n// function Searchbar() {\r\n//   const navigate = useNavigate();\r\n\r\n//   const { pathname } = useLocation();\r\n\r\n//   const [open, setOpen] = useState(false);\r\n\r\n//   const [searchQuery, setSearchQuery] = useState('');\r\n\r\n//   const reduceItems = NavConfig.map((list) => handleLoop(list.items, list.subheader)).flat();\r\n\r\n//   const allItems = flattenArray(reduceItems).map((option) => {\r\n//     const group = splitPath(reduceItems, option.path);\r\n\r\n//     return {\r\n//       group: group && group.length > 1 ? group[0] : option.subheader,\r\n//       title: option.title,\r\n//       path: option.path,\r\n//     };\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     if (open) {\r\n//       handleClose();\r\n//     }\r\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n//   }, [pathname]);\r\n\r\n//   const handleOpen = () => {\r\n//     setOpen(true);\r\n//   };\r\n\r\n//   const handleClose = () => {\r\n//     setOpen(false);\r\n//   };\r\n\r\n//   const handleClick = (path) => {\r\n//     if (path.includes('http')) {\r\n//       window.open(path);\r\n//     } else {\r\n//       navigate(path);\r\n//     }\r\n//     handleClose();\r\n//   };\r\n\r\n//   const handleKeyUp = (event) => {\r\n//     if (event.key === 'Enter') {\r\n//       handleClick(searchQuery);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <ClickAwayListener onClickAway={handleClose}>\r\n//       <div>\r\n//         {!open && (\r\n//           <IconButtonAnimate onClick={handleOpen}>\r\n//             <Iconify icon=\"eva:search-fill\" />\r\n//           </IconButtonAnimate>\r\n//         )}\r\n\r\n//         <Slide direction=\"down\" in={open} mountOnEnter unmountOnExit>\r\n//           <StyledSearchbar>\r\n//             <Autocomplete\r\n//               sx={{ width: 1, height: 1 }}\r\n//               autoHighlight\r\n//               disablePortal\r\n//               disableClearable\r\n//               popupIcon={null}\r\n//               PopperComponent={StyledPopper}\r\n//               onInputChange={(event, value) => setSearchQuery(value)}\r\n//               noOptionsText={<SearchNotFound query={searchQuery} sx={{ py: 10 }} />}\r\n//               options={allItems.sort((a, b) => -b.group.localeCompare(a.group))}\r\n//               groupBy={(option) => option.group}\r\n//               getOptionLabel={(option) => option.path}\r\n//               isOptionEqualToValue={(option, value) => option.path === value.path}\r\n//               filterOptions={createFilterOptions({\r\n//                 matchFrom: 'start',\r\n//                 stringify: (option) => option.title || option.path,\r\n//               })}\r\n//               renderInput={(params) => (\r\n//                 <InputBase\r\n//                   {...params.InputProps}\r\n//                   inputProps={params.inputProps}\r\n//                   fullWidth\r\n//                   autoFocus\r\n//                   placeholder=\"Search...\"\r\n//                   onKeyUp={handleKeyUp}\r\n//                   startAdornment={\r\n//                     <InputAdornment position=\"start\">\r\n//                       <Iconify icon=\"eva:search-fill\" sx={{ color: 'text.disabled' }} />\r\n//                     </InputAdornment>\r\n//                   }\r\n//                   sx={{ height: 1, typography: 'h6' }}\r\n//                 />\r\n//               )}\r\n//               renderOption={(props, option, { inputValue }) => {\r\n//                 const { title, path } = option;\r\n\r\n//                 const partsTitle = parse(title, match(title, inputValue));\r\n\r\n//                 const partsPath = parse(path, match(path, inputValue));\r\n\r\n//                 return (\r\n//                   <Box component=\"li\" {...props} onClick={() => handleClick(path)}>\r\n//                     <div>\r\n//                       {partsTitle.map((part, index) => (\r\n//                         <Box\r\n//                           key={index}\r\n//                           component=\"span\"\r\n//                           sx={{\r\n//                             typography: 'subtitle2',\r\n//                             textTransform: 'capitalize',\r\n//                             color: part.highlight ? 'primary.main' : 'text,primary',\r\n//                           }}\r\n//                         >\r\n//                           {part.text}\r\n//                         </Box>\r\n//                       ))}\r\n//                     </div>\r\n\r\n//                     <div>\r\n//                       {partsPath.map((part, index) => (\r\n//                         <Box\r\n//                           key={index}\r\n//                           component=\"span\"\r\n//                           sx={{\r\n//                             typography: 'caption',\r\n//                             color: part.highlight ? 'primary.main' : 'text.secondary',\r\n//                           }}\r\n//                         >\r\n//                           {part.text}\r\n//                         </Box>\r\n//                       ))}\r\n//                     </div>\r\n//                   </Box>\r\n//                 );\r\n//               }}\r\n//             />\r\n//           </StyledSearchbar>\r\n//         </Slide>\r\n//       </div>\r\n//     </ClickAwayListener>\r\n//   );\r\n// }\r\n\r\n// export default memo(Searchbar);\r\n\r\n// // ----------------------------------------------------------------------\r\n\r\n// function splitPath(array, key) {\r\n//   let stack = array.map((item) => ({\r\n//     path: [item.title],\r\n//     currItem: item,\r\n//   }));\r\n\r\n//   while (stack.length) {\r\n//     const { path, currItem } = stack.pop();\r\n\r\n//     if (currItem.path === key) {\r\n//       return path;\r\n//     }\r\n\r\n//     if (currItem.children?.length) {\r\n//       stack = stack.concat(\r\n//         currItem.children.map((item) => ({\r\n//           path: path.concat(item.title),\r\n//           currItem: item,\r\n//         }))\r\n//       );\r\n//     }\r\n//   }\r\n//   return null;\r\n// }\r\n\r\n// // ----------------------------------------------------------------------\r\n\r\n// function handleLoop(array, subheader = '') {\r\n//   return array?.map((list) => ({\r\n//     subheader,\r\n//     ...list,\r\n//     ...(list.children && {\r\n//       children: handleLoop(list.children, subheader),\r\n//     }),\r\n//   }));\r\n// }\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}